plugins {
    id 'kotlin-multiplatform' version '1.3.10'
//    id 'org.jetbrains.kotlin.platform.native' version '1.3.0-rc-146'
}

//repositories {
//    mavenCentral()
//    maven {
//        url "https://dl.bintray.com/jetbrains/kotlin-native-dependencies"
//    }
//}
//
//apply plugin: 'konan'
//
//konanInterop {
//    wiringPi {
//        defFile 'src/linuxMain/c_interop/wiringPi.def'
//        includeDirs '/usr/local/include'
//    }
//}
//
//konanArtifacts {
//    ktnative {
//        inputFiles fileTree('/usr/local/include')
//        linerOpts '-I/usr/local/include -L/usr/local/lib -lwiringPi'
//        useInterop 'wiringPi'
//    }
//}

//components.main {
//    dependencies {
//        cinterop('wiringPi') {
//            target('linux') {
//                compilerOpts '-I/usr/local/include -L/usr/local/lib -lwiringPi'
//            }
//        }
//    }
//}

kotlin {
    targets {

        // For ARM, preset should be changed to presets.iosArm32 or presets.iosArm64
        // For Linux, preset should be changed to e.g. presets.linuxX64
        // For MacOS, preset should be changed to e.g. presets.macosX64
        fromPreset(presets.linuxX64, 'linux') {
            compilations.main {
                cinterops {
                    wiringPi {
                        defFile project.file("src/linuxMain/c_interop/wiringPi.def")
            
                        compilerOpts '-I/usr/local/include -L/usr/local/lib -lwiringPi'
                    }
                }
            }
        }

        configure([linux]) {
            // Comment to generate Kotlin/Native library (KLIB) instead of executable file:
            compilations.main.outputKinds('EXECUTABLE')
            // Change to specify fully qualified name of your application's entry point:
            compilations.main.entryPoint = 'freeflightMain.main'
        }
    }

    sourceSets {
        // Note: To enable common source sets please comment out 'kotlin.import.noCommonSourceSets' property
        // in gradle.properties file and re-import your project in IDE.
        linuxMain {
        }
        linuxTest {
        }
    }
}

task runProgram {
    def buildType = 'release' // Change to 'debug' to run application with debug symbols.
    dependsOn "link${buildType.capitalize()}ExecutableLinux"
    doLast {
        def programFile = kotlin.targets.linux.compilations.main.getBinary('EXECUTABLE', buildType)
        exec {
            executable programFile
            args ''
        }
    }
}